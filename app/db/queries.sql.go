// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id,name, created_at, updated_at, last_score, top_score) VALUES ( ?,?,?,?,?,?)
`

type CreateUserParams struct {
	ID        string
	Name      string
	CreatedAt string
	UpdatedAt string
	LastScore int64
	TopScore  int64
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.LastScore,
		arg.TopScore,
	)
	return err
}

const getUserByName = `-- name: GetUserByName :one
SELECT id, name, last_score, top_score, created_at, updated_at FROM users WHERE name = ?
`

func (q *Queries) GetUserByName(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LastScore,
		&i.TopScore,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
